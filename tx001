async function timechang() {
  

  if (ac.var.时 >= 24) {
    
    ac.var.时 = ac.var.时 - 24;ac.var.日 = ac.var.日 + 1;

if (ac.var.日 > 30) {
      ac.var.月 = ac.var.月 + 1;
  ac.var.日 = ac.var.日 - 30;

      if (ac.var.月 > 12) {
        ac.var.年 = ac.var.年 + 1;
        ac.var.月 = ac.var.月 - 12;
      }
/*过月时，对所有未领取的悬赏进行刷新*/
  await updateXuanshang4();
// 只在每个月的1号进行NPC属性和金钱的更新
  if (ac.var.日 === 1) { updateNPCs();}
    
     
}
   for (let i=1;i<=4;i++){if (ac.arr.悬赏状态[i]==1){if (ac.arr.悬赏进行[i]>0){ac.arr.悬赏进行[i]--;}else{ac.arr.悬赏状态[i]=2;}}}
    if (ac.var.田地1成熟时间 > 0||ac.var.田地2成熟时间 > 0||ac.var.田地3成熟时间 > 0||ac.var.田地4成熟时间 > 0) {
  ac.var.田地1成熟时间 = ac.var.田地1成熟时间 - 1;
  if (ac.var.田地1成熟时间 <= 0) {
    ac.var.田地1成熟时间 = 0;

  }
      ac.var.田地2成熟时间 = ac.var.田地2成熟时间 - 1;
      if (ac.var.田地2成熟时间 <= 0) {
        ac.var.田地2成熟时间 = 0;

      }
      ac.var.田地3成熟时间 = ac.var.田地3成熟时间 - 1;
      if (ac.var.田地3成熟时间 <= 0) {
        ac.var.田地3成熟时间 = 0;

      }
      ac.var.田地4成熟时间 = ac.var.田地4成熟时间 - 1;
      if (ac.var.田地4成熟时间 <= 0) {
        ac.var.田地4成熟时间 = 0;

      }

    }  
    
     
   
  }
  
  await ac.updateNotification(); // 更新界面显示
  
}

async function stayAtHotel() {
  
  ac.var.一天剩余时间 = 24 - ac.var.时;
  ac.var.时=ac.var.时+ac.var.一天剩余时间+6
  await timechang();


}


// 更新NPC的属性和金钱
async function updateNPCs() {
  // 将之前生成的NPC信息转换为普通数组
  let savedNPCs = JSON.parse(ac.var.随机NPC属性);

  // 遍历保存的NPC信息数组，更新属性和金钱
  for (let i = 0; i < savedNPCs.length; i++) {
    let npc = savedNPCs[i];    
    let operate = getAttributeValue(npc, '经营');
    let ambition = getAttributeValue(npc, '野心');
    let financial = getAttributeValue(npc, '金钱');

    let money = calculateMoney(financial, operate, ambition);
    npc.find(attr => attr.title === '金钱').value = money;

   
    
  }

  // 将更新后的NPC信息存回变量
  ac.var.随机NPC属性 = JSON.stringify(savedNPCs);
  ac.updateNotification();
}

  function getAttributeValue(npc, attributeTitle) {
  // 辅助函数：根据属性标题获取属性值
  for (let i = 0; i < npc.length; i++) {
    if (npc[i].title === attributeTitle) {
      return npc[i].value;
    }
  }
  return 0; // 如果找不到对应属性，返回默认值（例如0）
}


function calculateMoney(financial, operate, ambition) {
  let baseMoney = financial * 1;
  let moneyIncrease = 0;

  
  moneyIncrease = baseMoney * (operate / 100);
  

  if (ambition >= 1) {
    let random = Math.random();
    if (random < ambition / 100) {
      // 野心越大，有一定概率得到或失去金钱
      let moneyChangePercentage = ambition / 100;
      let moneyChangeAmount = baseMoney * moneyChangePercentage;
      let randomMoneyChange = Math.random() < 0.5 ? -moneyChangeAmount : moneyChangeAmount;
      moneyIncrease += randomMoneyChange;
  }
  }
  return baseMoney + moneyIncrease;
}

/* -------------------------------- 使用说明 ------------------------------- */
await ac.sysDialogOn({
  content: `
1、说明
这个模板功能是生成一批NPC，并随机生成每个NPC的属性。
你在界面中点击【选择并存储】后，会把这个NPC的信息记录到数据库。不保存不会记录。
然后你可以选择下一个NPC，全部挑完之后关闭界面即可。

2、注意事项
（1）不点保存的话，就不会存这个NPC的数据。

3、难度系数
较难。需要你较高的逻辑思维。
`,
  id: 1558192,
  hasRoleName: false,
  hasBg: false,
  hasRoleAvatar: false,
  roleName: `角色名`,
  roleAvatarResId: "$1528927",
});
await ac.sysDialogOff({
  effect: "normal",
});



/* -------------------------------- 数据池 ------------------------------- */

//npcAmount代表生成的NPC信息的数量，16代表生成16个NPC。（可修改）
let npcAmount = 16;

//姓氏池（你可以扩展和修改）
let lastNames = [
"赵","钱","孙","李","周","吴","郑","王"
];

//名字池（你可以扩展和修改）
let firstNames = [
"俊雄","浩宇","阳","伟泽","鹏程","凯翔",
];

//籍贯池（你可以扩展和修改）
let hometowns = [
  "开封","洛阳","济南","长安","北京","九原","怀远","兰州","扬州","金陵","荆州","渝州","成都","杭州","泉州","广州","高雄",
];

//人物形象图片资源id池，（你可以扩展和修改）
//因为每个人物形象只能用一次，所以请确保资源的数量大于或等于npcAmount
let imageIds = [
  "$55169118",
  "$55169117",
  "$55169116",
  "$55169115",
  "$55169114",
  "$55169113",
  "$55169112",
  "$55169111",
  "$55169110",
  "$55169109",
  "$55169108",
  "$55169107",
  "$55169106",
  "$55169105",
  "$55169104",
  "$55169103",
  "$55169102",
  "$55169101",
  "$55169100",
  "$55169099",
  "$55169098",
];

//每一个属性显示的位置（你可以扩展和修改）
let itemPositions = [
  { x: 640, y: 600 },
  { x: 640, y: 550 },
  { x: 640, y: 500 },
  { x: 640, y: 450 },
  { x: 640, y: 400 },
  { x: 640, y: 350 },
];

/* -------------------------------- 信息存放 ------------------------------- */
//用于存放随机生成的NPC信息（勿改）
let randomNPCs = [];

//用于存放随机生成的NPC形象（勿改）
let randomImageIds = [];

//用于暂时存放选中的NPC信息（勿改）
//此数组最终会转换成字符串存于「ac.var.随机NPC属性」变量中
//读取「ac.var.随机NPC属性」时,请使用Json.parse()方法将其转换为普通数组
let pickedNPCs = [];

//用于存放选中的NPC的标号，用来判断是否重复选中（勿改）
let pickedIndices = [];

//用于循环生成随机NPC信息（勿改）
async function createNPCs() {
  for (let index = 0; index < npcAmount; index++) {
    await createRandomInfo();
  }
}

//生成每个NPC随机属性的逻辑
//如需增加属性，需在此函数内增加对应逻辑
async function createRandomInfo() {
  //随机生成人物形象, 同一个形象只能使用一次
  let imageIndex = await ac.random({
    min: 0,
    max: imageIds.length - 1,
  });
  let imageId = imageIds[imageIndex];
  imageIds.splice(imageIndex, 1);
  randomImageIds.push(imageId);

  let npc = [];

  //生成随机姓和名，如要增加类似从数据池中随机选中的属性，可以参考此逻辑
  let lastNameIndex = await ac.random({
    min: 0,
    max: lastNames.length - 1,
  });
  let lastName = lastNames[lastNameIndex];
  let firstNameIndex = await ac.random({
    min: 0,
    max: firstNames.length - 1,
  });
  let firstName = firstNames[firstNameIndex];
  let name_ = {
    title: "姓名",
    value: lastName + firstName,
  };
  npc.push(name_);

  //随机生成籍贯，如要增加类似从数据池中随机选中的属性，可以参考此逻辑
  let hometownIndex = await ac.random({
    min: 0,
    max: hometowns.length - 1,
  });
  let hometown = hometowns[hometownIndex];
  let hometown_ = {
    title: "籍贯",
    value: hometown,
  };
  npc.push(hometown_);

  //随机生成经营数值, min为身高下限， max为身高上限, 如要增加随机数值类的属性，可以参考此逻辑
  let operate = await ac.random({
    min: 1,
    max: 10,
  });
  let operate_ = {
    title: "经营",
    value: operate,
  };
  npc.push(operate_);

  //随机生成财力数值, 逻辑同身高
  let financial = await ac.random({
    min: 1,
    max: 10,
  });
  let financial_ = {
    title: "财力",
    value: financial,
  };
  npc.push(financial_);

  //随机生成野心数值, 逻辑同身高
  let ambition = await ac.random({
    min: 1,
    max: 10,
  });
  let ambition_ = {
    title: "野心",
    value: ambition,
  };
  npc.push(ambition_);
  
  //根据财力属性计算金钱的初始值
  let money = calculateMoney(financial);
  let money_ = {
    title: "金钱",
    value: money,
  };
  npc.push(money_);
  

  randomNPCs.push(npc);
}

//根据财力属性计算金钱的初始值
function calculateMoney(financial) {
  // 自定义计算逻辑
  // 可根据需要进行权重、比例或其他计算方式来确定初始金钱
  return financial * 2000;
}

/* -------------------------------- 变量 ------------------------------- */
let currentIndex = 0;
/* ------------------------------- 属性文字样式 ------------------------------ */
//属性文字样式，可修改
ac.createStyle({
  name: "textStyle",
  font: "方正楷体",
  bold: false,
  italic: false,
  fontSize: 30,
  color: "#FFF8EF",
  speed: 9,
});

/* -------------------------------- 创建界面 ------------------------------- */
async function createMainView() {
  //创建背景
  await ac.createImage({
    name: "backgroundImage",
    index: 0,
    inlayer: "window",
    resId: "$55094486",
    pos: {
      x: 0,
      y: 0,
    },
    anchor: {
      x: 0,
      y: 0,
    },
    opacity: 70,
    scale: 100,
    visible: true,
    verticalFlip: false,
    horizontalFlip: false,
  });

  //返回按钮的点击事件
  async function jumpToEntryScene() {
    await ac.jump({
      plotID: 3549536,
      transition: ac.SCENE_TRANSITION_TYPES.normal,
    });
  }
  //返回按钮
  await ac.createOption({
    name: "opClose",
    index: 0,
    inlayer: "window",
    visible: true,
    nResId: "$53967295",
    sResId: "$53967294",
    content: ``,
    pos: {
      x: 1240,
      y: 42,
    },
    anchor: {
      x: 50,
      y: 50,
    },
    onTouchEnded: jumpToEntryScene,
  });

  //上一个按钮
  await ac.createOption({
    name: "previousButton",
    index: 9,
    inlayer: "window",
    visible: true,
    nResId: "$54571334",
    sResId: "$54571334",
    content: ``,
    pos: {
      x: 340,
      y: 60,
    },
    anchor: {
      x: 0,
      y: 0,
    },
    onTouchEnded: async () => {
      await goToPrevious();
    },
  });

  //选择并储存按钮
  await ac.createOption({
    name: "pickButton",
    index: 9,
    inlayer: "window",
    visible: true,
    nResId: "$55169272",
    sResId: "$55169273",
    content: `选择并储存`,
    pos: {
      x: 540,
      y: 60,
    },
    anchor: {
      x: 0,
      y: 0,
    },
    onTouchEnded: async () => {
      await picked();
    },
  });

  //下一个按钮
  await ac.createOption({
    name: "nextButton",
    index: 9,
    inlayer: "window",
    visible: true,
    nResId: "$54571335",
    sResId: "$54571335",
    content: ``,
    pos: {
      x: 940,
      y: 60,
    },
    anchor: {
      x: 0,
      y: 0,
    },
    onTouchEnded: async () => {
      await goToNext();
    },
  });
}

async function createNPCView(index) {
  await ac.createLayer({
    name: "npcLayer",
    index: 0,
    inlayer: "window",
  });
  await ac.createImage({
    name: "welcomeNPC",
    inlayer: "npcLayer",
    resId: randomImageIds[index],
    pos: {
      x: 60,
      y: 0,
    },
    scale: 66,
    anchor: {
      x: 0,
      y: 0,
    },
  });
  let items = randomNPCs[index];
  for (let i = 0; i < items.length; i++) {
    const item = items[i];
    await ac.createText({
      name: `item_${i}`,
      index: 0,
      inlayer: "npcLayer",
      content: `${item.title}: ${item.value}`,
      style: "textStyle",
      pos: itemPositions[i],
      size: {
        width: 410,
        height: 30,
      },
      direction: ac.TEXT_DIRECTION_TYPES.horizontal,
      halign: ac.HALIGN_TYPES.left,
      valign: ac.VALIGN_TYPES.center,
      anchor: {
        x: 0,
        y: 50,
      },
    });
  }
}

async function picked() {
  if (pickedIndices.includes(currentIndex)) {
    await showTextMessage("已经选过此NPC了");
  } else {
    let npc = randomNPCs[currentIndex];
    let resId = randomImageIds[currentIndex];
    let imageInfo = {
      title: "图片资源",
      value: resId,
    };
    let eventInfo = {
      title: "经历",
      value: [],
    };
    let pickedNPC = [...npc];
    pickedNPC.push(imageInfo, eventInfo);
    pickedNPCs.push(pickedNPC);
    ac.var.随机NPC属性 = JSON.stringify(pickedNPCs);
    console.log(6621, ac.var.随机NPC属性);
    pickedIndices.push(currentIndex);
    await showTextMessage("已保存该NPC信息");
  }
}

async function showTextMessage(message) {
  let alertMessageLayer = {
    name: "alertMessageLayer",
    index: Number.MAX_VALUE,
    inlayer: "window",
    visible: false,
    size: {
      width: 1280,
      height: 720,
    },
    onTouchEnded: () => {},
  };
  let alertMessageBackgroundImage = {
    name: "messageBackgroundImage",
    inlayer: "alertMessageLayer",
    resId: "$55098180",
    pos: {
      x: 640,
      y: 360,
    },
    anchor: {
      x: 50,
      y: 50,
    },
  };
  ac.createStyle({
    name: "alertMessageTextStyle",
    font: "方正楷体",
    bold: false,
    italic: false,
    fontSize: 28,
    color: "#ffffff",
    speed: 9,
  });
  let alertMessageText = {
    name: "alertMessageText",
    inlayer: "alertMessageLayer",
    content: message,
    style: "alertMessageTextStyle",
    pos: {
      x: 640,
      y: 360,
    },
    size: {
      width: 960,
      height: 30,
    },
    direction: ac.TEXT_DIRECTION_TYPES.horizontal,
    halign: ac.HALIGN_TYPES.middle,
    valign: ac.VALIGN_TYPES.center,
    anchor: {
      x: 50,
      y: 50,
    },
  };
  await ac.createLayer(alertMessageLayer);
  await ac.createImage(alertMessageBackgroundImage);
  await ac.createText(alertMessageText);
  await ac.show({
    name: "alertMessageLayer",
    effect: "fadein",
    duration: 100,
  });
  await ac.delay({
    time: message.length * 50 + 800,
  });
  await ac.remove({
    name: "alertMessageLayer",
    effect: "fadeout",
    duration: 100,
  });
}

async function goToPrevious() {
  if (currentIndex <= 0) {
    currentIndex = npcAmount - 1;
  } else {
    currentIndex = currentIndex - 1;
  }
  await createNPCView(currentIndex);
}

async function goToNext() {
  if (currentIndex >= npcAmount - 1) {
    currentIndex = 0;
  } else {
    currentIndex = currentIndex + 1;
  }
  await createNPCView(currentIndex);
}

/* -------------------------------- 启动程序 ------------------------------- */

async function main() {
  // 创建界面和NPC
  await createMainView();
  await createNPCs();
  await createNPCView(currentIndex);

  // 启动时间推进函数
  timechang();
}

main();


/* -------------------------------- 使用说明 ------------------------------- */
await ac.sysDialogOn({
  content: `
1、功能说明
这个模板是对生成NPC的某个属性进行排行。
比如，对NPC的【经验】属性，取前10名由高到低排列，界面中每一页排5个人，超出可翻页。

2、注意事项
你需要使用前置功能【随机生成NPC】生成一批NPC数据，才能使用排行。
没有前置数据，排出来就是空白的。

3、难度系数
较难。需要你能理解复杂的排行算法。

  `,
  id: 1558192,
  hasRoleName: false,
  hasBg: false,
  hasRoleAvatar: false,
  roleName: `角色名`,
  roleAvatarResId: '$1528927',
});
await ac.sysDialogOff({
  effect: 'normal',
});





/* -------------------------------- 配置（可根据你的需要修改） ------------------------------- */

//设置排名所参照属性名, 只支持数值类型的属性。
const rankingItem = "金钱";

//设置代表NPC名称的属性名, 该属性会显示在排行榜中。
const namingItem = "姓名";

//设置名次的数量，比如排前10名就设置为10，排前20名就设置为20。
const rankingCount = 10;

//设置是否按照降序排列，如果想按照数值从大到小排名，就设置为true, 如果是从小到大排名，就设置为false。
const isDescending = true;

//currentPage：初始页
let currentPage = 0;

//pageSize：每页显示几个人。如果你改了数量，下面【每行人物的坐标位置】也要相应加减。
let pageSize = 5;
//itemPositions：每行人物的坐标位置。这里按照每页显示5个人，设定了5个坐标。
const itemPositions = [
  { x: 310, y: 541 },
  { x: 310, y: 453 },
  { x: 310, y: 365 },
  { x: 310, y: 278 },
  { x: 310, y: 187 },
];



/* -------------------------------- 创建界面（可根据你的需要修改）  ------------------------------- */
//背景图片
  await ac.createImage({
    name: "backgroundImage",
    inlayer: "window",
    resId: "$54537280",
  });

  //返回按钮的点击事件
  async function jumpToEntryScene() {
    await ac.jump({
      plotID: 3549536,
      transition: ac.SCENE_TRANSITION_TYPES.normal,
    });
  }
  //返回按钮
  await ac.createOption({
    name: 'opClose',
    index: 0,
    inlayer: 'window',
    visible: true,
    nResId: '$53967295',
    sResId: '$53967294',
    content: ``,
    pos: {
      x: 1240,
      y: 42,
    },
    anchor: {
      x: 50,
      y: 50,
    },
    onTouchEnded: jumpToEntryScene,
  });

//创建上下翻页按钮
  await ac.createOption({
    name: "pageUp",
    index: 0,
    inlayer: "window",
    visible: true,
    nResId: "$54571334",
    sResId: "$54571334",
    content: ``,
    pos: {
      x: 555,
      y: 90,
    },
    anchor: {
      x: 50,
      y: 50,
    },
    onTouchEnded: async () => {
      await goToPreviousPage();
    },
  });
  await ac.createOption({
    name: "pageDown",
    index: 0,
    inlayer: "window",
    visible: true,
    nResId: "$54571335",
    sResId: "$54571335",
    content: ``,
    pos: {
      x: 834,
      y: 90,
    },
    anchor: {
      x: 50,
      y: 50,
    },
    onTouchEnded: async () => {
      await goToNextPage();
    },
  });

//创建排名列表（勿改）
async function createListView() {
  await ac.createLayer({
    name: "listLayer",
    index: 1,
    inlayer: "window",
  });
  
  
  
  
  
   // 创建表格头部（第一排）
  await ac.createText({
    name: "header_rank",
    index: 0,
    inlayer: "listLayer",
    content: "名次",
    pos: { x: 200, y: 541 },
    size: { width: 410, height: 54 },
    direction: ac.TEXT_DIRECTION_TYPES.horizontal,
    halign: ac.HALIGN_TYPES.left,
    valign: ac.VALIGN_TYPES.center,
    anchor: { x: 0, y: 50 },
  });

  await ac.createText({
    name: "header_name",
    index: 0,
    inlayer: "listLayer",
    content: "姓名",
    pos: { x: 350, y: 541 },
    size: { width: 410, height: 54 },
    direction: ac.TEXT_DIRECTION_TYPES.horizontal,
    halign: ac.HALIGN_TYPES.left,
    valign: ac.VALIGN_TYPES.center,
    anchor: { x: 0, y: 50 },
  });

  await ac.createText({
    name: "header_money",
    index: 0,
    inlayer: "listLayer",
    content: "金钱",
    pos: { x: 500, y: 541 },
    size: { width: 410, height: 54 },
    direction: ac.TEXT_DIRECTION_TYPES.horizontal,
    halign: ac.HALIGN_TYPES.left,
    valign: ac.VALIGN_TYPES.center,
    anchor: { x: 0, y: 50 },
  });

  await ac.createText({
    name: "header_operate",
    index: 0,
    inlayer: "listLayer",
    content: "经营",
    pos: { x: 650, y: 541 },
    size: { width: 410, height: 54 },
    direction: ac.TEXT_DIRECTION_TYPES.horizontal,
    halign: ac.HALIGN_TYPES.left,
    valign: ac.VALIGN_TYPES.center,
    anchor: { x: 0, y: 50 },
  });
  await ac.createText({
    name: "header_ambition",
    index: 0,
    inlayer: "listLayer",
    content:"野心",
    pos: { x: 800, y: 541 },
    size: { width: 410, height: 54 },
    direction: ac.TEXT_DIRECTION_TYPES.horizontal,
    halign: ac.HALIGN_TYPES.left,
    valign: ac.VALIGN_TYPES.center,
    anchor: { x: 0, y: 50 },
  });

  await ac.createText({
    name: "header_financial",
    index: 0,
    inlayer: "listLayer",
    content: "财力",
    pos: { x: 950, y: 541 },
    size: { width: 410, height: 54 },
    direction: ac.TEXT_DIRECTION_TYPES.horizontal,
    halign: ac.HALIGN_TYPES.left,
    valign: ac.VALIGN_TYPES.center,
    anchor: { x: 0, y: 50 },
  });
  // 创建表格内容（第二排及以下）
  for (let i = 0; i < pageSize; i++) {
    let index = pageSize * currentPage + i;
    if (index >= rankingCount || index >= items.length) break;
    
    
  let rankItemIndex = items[index].findIndex(isRankingItem);
  let nameItemIndex = items[index].findIndex(isNamingItem);
  let moneyItemIndex = items[index].findIndex(item => item.title === "金钱");
  let operateItemIndex = items[index].findIndex(item => item.title === "经营");
  let ambitionItemIndex = items[index].findIndex(item => item.title === "野心");
  let financialItemIndex = items[index].findIndex(item => item.title === "财力");
  let rank = index + 1;
  let name = items[index][nameItemIndex].value;
  let money = items[index][moneyItemIndex].value;
  let operate = items[index][operateItemIndex].value;
  let ambition = items[index][ambitionItemIndex].value;
  let financial = items[index][financialItemIndex].value;
  
   
  


    let position = itemPositions[i];

    await ac.createText({
      name: `rank_${index}`,
      index: 0,
      inlayer: "listLayer",
      content: `${rank}`,
      pos: { x: 200, y: position.y-50 },
      size: { width: 200, height: 54 },
      direction: ac.TEXT_DIRECTION_TYPES.horizontal,
      halign: ac.HALIGN_TYPES.left,
      valign: ac.VALIGN_TYPES.center,
      anchor: { x: 0, y: 50 },
    });

    await ac.createText({
      name: `name_${index}`,
      index: 0,
      inlayer: "listLayer",
      content: `${name}`,
      pos: { x: 350, y: position.y-50 },
      size: { width: 200, height: 54 },
      direction: ac.TEXT_DIRECTION_TYPES.horizontal,
      halign: ac.HALIGN_TYPES.left,
      valign: ac.VALIGN_TYPES.center,
      anchor: { x: 0, y: 50 },
    });

    await ac.createText({
      name: `money_${index}`,
      index: 0,
      inlayer: "listLayer",
      content: `${money}`,
      pos: { x: 500, y: position.y-50 },
      size: { width: 200, height: 54 },
      direction: ac.TEXT_DIRECTION_TYPES.horizontal,
      halign: ac.HALIGN_TYPES.left,
      valign: ac.VALIGN_TYPES.center,
      anchor: { x: 0, y: 50 },
    });
    await ac.createText({
      name: `operate_${index}`,
      index: 0,
      inlayer: "listLayer",
      content: `${operate}`,
      pos: { x: 650, y: position.y-50 },
      size: { width: 200, height: 54 },
      direction: ac.TEXT_DIRECTION_TYPES.horizontal,
      halign: ac.HALIGN_TYPES.left,
      valign: ac.VALIGN_TYPES.center,
      anchor: { x: 0, y: 50 },
    });

    await ac.createText({
      name: `ambition_${index}`,
      index: 0,
      inlayer: "listLayer",
      content: `${ambition}`,
      pos: { x: 800, y: position.y-50 },
      size: { width: 200, height: 54 },
      direction: ac.TEXT_DIRECTION_TYPES.horizontal,
      halign: ac.HALIGN_TYPES.left,
      valign: ac.VALIGN_TYPES.center,
      anchor: { x: 0, y: 50 },
    });

    await ac.createText({
      name: `financial_${index}`,
      index: 0,
      inlayer: "listLayer",
      content: `${financial}`,
      pos: { x: 950, y: position.y-50 },
      size: { width: 200, height: 54 },
      direction: ac.TEXT_DIRECTION_TYPES.horizontal,
      halign: ac.HALIGN_TYPES.left,
      valign: ac.VALIGN_TYPES.center,
      anchor: { x: 0, y: 50 },
    });
  }
  
}






/* -------------------------------- 排序逻辑（勿改） ------------------------------- */
const isRankingItem = (element) => element.title == rankingItem;
const isNamingItem = (element) => element.title == namingItem;

function getRanking() {
  try {
    let npcs = JSON.parse(ac.var.随机NPC属性);
      
    
    npcs.sort(function (a, b) {
      let index = a.findIndex(isRankingItem);
      var keyA = a[index].value;
      var keyB = b[index].value;
      return isDescending ? keyB - keyA : keyA - keyB;
    });
    return npcs;
  } catch (e) {
    return [];
  }
}

//上翻页。
async function goToPreviousPage() {
  if (currentPage <= 0) return;
  currentPage = currentPage - 1;
  await createListView();
}
//下翻页。
async function goToNextPage() {
  let totalPage = Math.min(
    Math.ceil(items.length / pageSize),
    Math.ceil(rankingCount / pageSize)
  );
  if (currentPage >= totalPage - 1) return;
  currentPage = currentPage + 1;
  await createListView();
}



/* -------------------------------- 启动程序 ------------------------------- */

let items = []; //数据池（勿改）。
items = getRanking();

await createListView();


